router.get("/callback", async (req, res) => {
  const { code, state } = req.query;

  // Validate the state
  if (state !== req.session.state) {
    return res.status(400).send("State mismatch error");
  }

  // Prepare the request to exchange the authorization code for an access token
  const tokenRequest = {
    client_id: process.env.QB_CLIENT_ID,
    client_secret: process.env.QB_CLIENT_SECRET,
    code: code,
    redirect_uri: "https://rae-empire.vercel.app/callback",
    grant_type: 'authorization_code', // Use authorization code grant type
  };

  try {
    // Make the request to QuickBooks to exchange the code for tokens
    const response = await axios.post('https://oauth.platform.intuit.com/oauth2/v1/tokens/bearer', null, {
      headers: {
        Authorization: `Basic ${Buffer.from(`${process.env.QB_CLIENT_ID}:${process.env.QB_CLIENT_SECRET}`).toString('base64')}`,
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      params: tokenRequest,
    });

    // Store the tokens (access_token, refresh_token) in session or database
    req.session.access_token = response.data.access_token;
    req.session.refresh_token = response.data.refresh_token;

    // Redirect the user to your dashboard or another page after success
    res.redirect('/dashboard'); // Replace with the route you want the user to be redirected to

  } catch (error) {
    // Handle errors, e.g., token exchange failure
    console.error("Error exchanging code for token:", error);
    res.status(500).send("Error exchanging code for token");
  }
});

module.exports = router;
