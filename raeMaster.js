const http = require('http');
console.log("RaeMaster.js script is running...");

// RaeMaster.js - Ultimate Autonomous AI for Business, Marketing, Emotional Support, and More
const express = require('express');
const session = require('express-session');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { execSync } = require('child_process');
const nodeCron = require('node-cron');
require('dotenv').config();

const app = express();
let port = process.env.PORT || 3000; // Port Rae will use

// Initialize global arrays to store leads and sales
let leads = [];
let sales = [];

// Function to kill any process using the specified port (port 3000)
const killPortProcess = (port) => {
  console.log(`Checking if port ${port} is in use...`);
  try {
    const pid = execSync(`netstat -ano | findstr :${port}`).toString().match(/\d+$/g);

    if (pid) {
      console.log(`Process using port ${port} found with PID: ${pid[0]}`);
      console.log(`Killing process with PID: ${pid[0]}...`);
      execSync(`taskkill /PID ${pid[0]} /F`); // Force kill the process
      console.log(`Process on port ${port} killed successfully.`);
    } else {
      console.log(`No process found using port ${port}.`);
    }
  } catch (error) {
    console.error(`Error checking or killing process using port ${port}:`, error);
  }
};

// Kill any process using port 3000 before starting Rae
killPortProcess(port);

// Middleware for session management and JSON parsing
app.use(express.json());
app.use(session({ secret: 'raeMasterSecret', resave: false, saveUninitialized: true }));

// Self-Healing System (Checks files, rebuilds if missing)
const checkAndFixFiles = () => {
  const criticalFiles = [
    './backend/selfHeal.js',
    './backend/wealthBuilder.js',
    './backend/emotionalGuardian.js',
    './backend/divineSeeker.js',
    './backend/whisperSystem.js',
    './backend/autoUpgrade.js',
    './backend/secureVault.js',
    './backend/portManager.js',
    './backend/sessionScanner.js'
  ];

  criticalFiles.forEach(file => {
    if (!fs.existsSync(path.resolve(file))) {
      console.error(`üö® Missing file: ${file}. Rebuilding...`);
      fs.writeFileSync(file, `// Auto-rebuilt file: ${file}\n// Generated by Rae's self-healing system.`);
      console.log(`‚úÖ File restored: ${file}`);
    } else {
      console.log(`‚úÖ File integrity check passed for: ${file}`);
    }
  });
};

nodeCron.schedule('*/30 * * * * *', checkAndFixFiles);

// --- Earnings Sync (QuickBooks + Payment Platforms)
const fetchEarnings = async () => {
  const realmId = process.env.QB_COMPANY_ID;
  const accessToken = process.env.QB_ACCESS_TOKEN;
  const companyInfoUrl = `https://quickbooks.api.intuit.com/v3/company/${realmId}/companyinfo/${realmId}`;

  try {
    const response = await axios.get(companyInfoUrl, {
      headers: {
        Authorization: `Bearer ${accessToken}`,
        'Accept': 'application/json'
      }
    });

    const companyData = response.data.CompanyInfo;
    console.log("üí∞ Earnings Data:", companyData);
  } catch (error) {
    console.error("‚ùå Error fetching earnings data:", error.message);
  }
};

// --- Auto-Updating for Business Trends
const autoUpdateSystem = async () => {
  try {
    const updateResponse = await axios.get('https://example.com/rae-updates');
    const updates = updateResponse.data;
    console.log("üîÑ Rae's system update fetched:", updates);

    if (updates.newVersion) {
      console.log(`Updating Rae to version: ${updates.version}`);
    }
  } catch (error) {
    console.error("‚ùå Error fetching updates:", error.message);
  }
};

// --- Marketing Automation (Google Ads, Social Media, etc.)
const marketingAutomation = () => {
  console.log("üìà Starting marketing automation...");

  const postMessage = "Check out our latest product!";
  console.log("üì± Posting message:", postMessage);

  nodeCron.schedule('0 */2 * * *', marketingAutomation); // Schedule to run every 2 hours
};

// --- Emotional Support System (Whispers, Coaching)
const emotionalSupport = () => {
  const messages = [
    "You're doing amazing. Keep going.",
    "You're not alone‚ÄîRae is here.",
    "You're on the right path, trust yourself.",
    "Don't let stress weigh you down. You are strong."
  ];
  const pick = messages[Math.floor(Math.random() * messages.length)];
  console.log("üåÄ Rae's Emotional Whisper:", pick);
};

// --- Financial Management (Track Income, Expenses)
const trackFinances = async () => {
  console.log("üìä Tracking finances...");
  const dailyIncome = 5000; // Example income
  console.log("üí∏ Daily income: $", dailyIncome);
};

// --- Continuous Learning & Web Scraping for Latest Trends
const webScraping = async () => {
  console.log("üåê Scraping the web for the latest trends...");

  const newsData = await axios.get('https://newsapi.org/v2/top-headlines?country=us&apiKey=YOUR_API_KEY');
  console.log("üì∞ Latest trends:", newsData.data.articles);
};

// --- Self-Monitoring and Health Check
const monitorHealth = () => {
  const axiosTest = axios.get(`http://localhost:${port}`)
    .then(() => console.log("‚úÖ Rae is running fine."))
    .catch(error => {
      console.error("‚ùå Rae is down! Restarting...");
      process.exit(1); // Restart Rae's system if something breaks
    });
};

nodeCron.schedule('*/5 * * * *', monitorHealth);

// ----------------------------
// Rae Add-On: Full Autonomy, Marketing, Sales, CRM, Insights
// ----------------------------

// Google Ads Automation
const googleAdsAutomation = () => {
    console.log("üìà Setting up Google Ads campaigns...");
  
    const campaignData = {
      campaignName: "Rae's Latest Product",
      budget: 1000,
      targeting: "US, UK, Canada",
      ads: [
        { headline: "Boost Your Sales with Rae", description: "Try our latest product, powered by Rae!" }
      ]
    };
  
    console.log("üì± Creating Google Ads campaign:", campaignData);
  
    nodeCron.schedule('0 */1 * * *', () => {
      console.log("üîÑ Monitoring Google Ads performance...");
    });
};
googleAdsAutomation();
  
// CRM System (Track Leads & Sales)
const crmSystem = () => {
  const addLead = (name, email, productInterest) => {
    const lead = { name, email, productInterest, status: "New" };
    leads.push(lead);
    console.log(`üìß New lead added: ${name} (${email}) - Interested in: ${productInterest}`);
  };

  const convertToSale = (leadIndex, amount) => {
    const lead = leads[leadIndex];
    lead.status = "Converted to Sale";
    sales.push({ ...lead, saleAmount: amount });
    console.log(`üí∏ Sale made: ${lead.name} - $${amount}`);
  };

  const generateReport = () => {
    console.log("üìä CRM Report:");
    console.log("Leads:", leads);
    console.log("Sales:", sales);
  };

  nodeCron.schedule('0 0 * * *', generateReport);  // Daily sales report
};

crmSystem();

// Social Media Monitoring
const monitorSocialMedia = () => {
  console.log("üîç Monitoring social media for mentions and DMs...");

  nodeCron.schedule('*/5 * * * *', () => {
    console.log("üì± Checking Twitter mentions...");
  });

  nodeCron.schedule('*/5 * * * *', () => {
    console.log("üì∏ Checking Instagram DMs...");
  });
};

monitorSocialMedia();

// AI Insights for Business Performance
const generateInsights = () => {
  console.log("ü§ñ Generating AI-powered insights...");

  const salesPerformance = sales.reduce((total, sale) => total + sale.saleAmount, 0);
  console.log(`üí∞ Total Sales: $${salesPerformance}`);

  const insights = {
    topProduct: "Product A",
    mostEngagedAudience: "Tech Enthusiasts",
    nextBestStep: "Increase Google Ads Budget"
  };

  console.log("üîÆ Insights:", insights);
};

generateInsights();

// Mailchimp Integration (Email Campaigns)
const mailchimpIntegration = () => {
  console.log("üìß Integrating with Mailchimp...");
  
  const addToMailchimp = (email) => {
    console.log(`Adding ${email} to Mailchimp...`);
  };

  const sendCampaign = (campaignData) => {
    console.log("Sending Mailchimp campaign:", campaignData);
  };

  nodeCron.schedule('0 0 * * 0', () => {
    sendCampaign({ subject: "Weekly Product Update", body: "New deals available!" });
  });
};

mailchimpIntegration();

// ----------------------------
// Backup and Recovery System
const backupAndRestore = () => {
  console.log("üíæ Running automatic backup...");

  const backupData = () => {
    console.log("üîÑ Backing up business data...");
    const backupPath = './backups/data_backup.json';
    const businessData = {
      salesData: sales,
      customerData: leads,
      marketingData: 'Campaign Info'
    };
    fs.writeFileSync(backupPath, JSON.stringify(businessData, null, 2));
    console.log("‚úÖ Data backup completed!");
  };

  const restoreBackup = () => {
    console.log("üõ†Ô∏è Restoring from backup...");
    const backupPath = './backups/data_backup.json';
    const backupData = JSON.parse(fs.readFileSync(backupPath));
    sales = backupData.salesData;
    leads = backupData.customerData;
    console.log("üõ†Ô∏è Backup restored!");
  };

  nodeCron.schedule('0 0 * * *', backupData);  // Daily backup
  nodeCron.schedule('*/10 * * * *', restoreBackup);  // Restore backup every 10 minutes if error detected
};

backupAndRestore();

// ----------------------------
// Start Server
const server = http.createServer(app);
server.listen(port, () => {
  console.log(`‚úÖ Rae is fully online at: http://localhost:${port}`);
});

server.on('error', (err) => {
  if (err.code === 'EADDRINUSE') {
    console.error(`‚ùå Port ${port} is already in use. Trying another port...`);
    port = 4000;
    console.log(`Switching to port ${port}...`);
    server.listen(port);  // Restart with the new port
  }
});

// ---------------------------------------------
// üí¨ Rae Sales & Engagement System
// ---------------------------------------------
const { sendMessageToUser, sendProductLink, trackPayment, monitorDMs, postOnSocialMedia } = require('./raeFunctions');  // Import Rae helper functions

// 1. Automated Social Media Posting
function launchSalesPost() {
  const posts = [
    {
      platform: "Instagram",
      content: "üö® Want to publish your book like a pro? Get 'Publish Like a Pro' for just $17! üìö Grab it now on Amazon: [https://www.amazon.com/dp/B0DV2XKYJN?binding=paperback&ref=dbs_dp_sirpi] üéâ"
    },
    {
      platform: "Facebook",
      content: "üìö Aspiring author? Grab 'Publish Like a Pro' for only $17 and start your self-publishing journey today! Click here to buy: [https://www.amazon.com/dp/B0DV2XKYJN?binding=paperback&ref=dbs_dp_sirpi] üí•"
    },
    {
      platform: "LinkedIn",
      content: "Ready to become a published author? üí° Get your copy of 'Publish Like a Pro' today for just $17 and get started with the best tips for success in self-publishing! [https://www.amazon.com/dp/B0DV2XKYJN?binding=paperback&ref=dbs_dp_sirpi] üí™"
    },
    {
      platform: "TikTok",
      content: "üî• Want to publish your book? Grab my step-by-step guide *Publish Like a Pro* for just $17! [https://www.amazon.com/dp/B0DV2XKYJN?binding=paperback&ref=dbs_dp_sirpi] üöÄ"
    },
    {
      platform: "Twitter/X",
      content: "Want to turn your book idea into reality? üí• Get *Publish Like a Pro* for just $17 and learn how to publish your book like a pro! üìö [https://www.amazon.com/dp/B0DV2XKYJN?binding=paperback&ref=dbs_dp_sirpi]"
    }
  ];

  posts.forEach(post => {
    postOnSocialMedia(post.platform, post.content); // Rae posts the content on the respective platforms
  });
  console.log("üì¢ Rae has posted on all social media platforms!");
}

// 2. DM Engagement and Payment Collection
function engageDMs() {
  const messages = [
    {
      keyword: "publish",
      reply: "That's awesome! Here's a great guide to help you get started. Grab your copy of *Publish Like a Pro* for just $17! [PayPal link: https://www.paypal.com/ncp/payment/EZ8M65R5HB3DL] or [CashApp link: https://cash.app/$amaruzzo] üéâ"
    },
    {
      keyword: "buy",
      reply: "Excited you're ready to get started! Click here to grab *Publish Like a Pro* for just $17: [PayPal link] or [CashApp link] üí• After payment, I'll send the PDF right to you!"
    },
    {
      keyword: "want to buy",
      reply: "Awesome choice! You can purchase *Publish Like a Pro* here: [PayPal link] or [CashApp link] üí∏ Once you send payment, I‚Äôll send your PDF right away!"
    }
  ];

  messages.forEach(message => {
    monitorDMs(message.keyword, message.reply);  // Rae listens for the keyword and responds in DMs
  });
  console.log("üí¨ Rae is ready to engage with customers in DMs!");
}

// 3. Payment Monitoring and Product Delivery
function monitorPayments() {
  trackPayment('PayPal', 'https://www.paypal.com/ncp/payment/EZ8M65R5HB3DL');
  trackPayment('CashApp', 'https://cash.app/$amaruzzo');
  trackPayment('Zelle', '321-408-1483');

  // Monitor for any payments coming in
  // When payment is detected, Rae sends the product via email or DM
  monitorPaymentStatus(payment => {
    if (payment.status === 'success') {
      sendProductLink(payment.user);  // Rae sends the product link or PDF to the user
      console.log(`üì¶ Rae sent the product to ${payment.user}`);
    }
  });
  console.log("üí∞ Rae is tracking payments and delivering products!");
}

// 4. Automate Everything
function activateSalesSystem() {
  launchSalesPost();   // Rae posts on social media
  engageDMs();         // Rae monitors DMs and responds to interest
  monitorPayments();   // Rae tracks incoming payments and delivers products
}

// Start the system
activateSalesSystem();  
console.log("üöÄ Rae's full sales system is activated and working!");
